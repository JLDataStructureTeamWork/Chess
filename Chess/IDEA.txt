//-----------重点思路-----------//
(1)点的确定以及每个可能棋局的生成：！！使用优先队列
步骤：
1、对于搜索范围之内的每个空点，进行评分。选择评分前W个点继续。
2、分别对前W个点进行安放，对于这W个可能性进行落第二个点。选择前B个局面作为儿子结点
//-----------chess.cpp中的函数------//
(1)Step machine(int Board[19][19],int computerSide)
main函数的接口；主要实现功能函数，只返回一个位置

---------(2)函数考虑删除，暂时保留--------------
//函数一定要经过测试！！
//不经测试很难查找原因！！
(2)int ALL_EvalueFucation(int VirtualBoard[19][19],int BeginX,int EndX,int BeginY,int EndY,int ComputerSide)
主要功能：用于计算整个虚拟棋盘分数。
VirtualBoard是认为虚拟棋盘，而非现实游戏界面
BeginX/Y,EndX/Y为当前搜索范围。不必搜素19*19的整个棋盘。二是勾勒出现有棋子的举行轮廓，长宽再增加2。
ComputerSide为我方执子颜色。

(3)int Part_EvalueFucation(int Board[19][19],Point FirstChess,Point SecondChess,int ComputerSide)
由于下两子之后，只涉及到包含这一子周围的路的变化。共有4个方向，每方向最多6路，故当前界面中的路只有4*6*2条路的分数发生变化
无需计算整个界面的分数，计算相对分数即可简化计算。
该函数的返回值代表了这两个棋子加入后对当前局面相对于己方的影响。
其中的子函数PartScore_EvalueFucation用于计算针对单个交叉点的评价分数，具有避免一条路走两次的功能
子函数int PartScore_EvalueFucation(int Board[19][19], Point FirstChess, Point LimitChess,int ComputerSide,int limit)
可用来求单颗棋子的分数，只需将limit设为0即可，limitchess随机赋值。


IfNot_Road(int Board[19][19], int BeginX, int EndX, int BeginY, int EndY, int &flag, int dir)
形参分别代表预计形成路的起点坐标和终点坐标，flag是标志路的颜色，dir是路的方向
子函数IfNot_Road用于甄别从起始点到终点是否构成一条路

(4)void BoardRange(int Board[19][19],int &BeginX,int &EndX,int &BeginY,int &EndY)
传递引用，进行界面边界的划定。

(5)Step PreSeek(int Board[19][19], int BeginX, int EndX, int BeginY, int EndY)//需要更新扩展到6-8窗口法
在递归之前，用于判断界面中是否有活四活五，可直接下判断，不用博弈树。
(6)Step PreSeek_ReturnEmpty(int Board[19][19], int BeginX, int BeginY,int dir)
是(5)的子函数
(7)int NegaMax_AlphaBeta(Step step, int Alpha,int Beta,int depth)
最大最小值搜索的进阶版本，且具有αβ剪枝功能
自下而上返回当前节点的分数
深度确定，从叶子节点开始进行估值
//---如果遇到git无法使用--//
点击操作-打开命令提示符-
拉取：git pull origin master
推送：git push -u origin master

//----------网站-----------//
六子棋讲义：https://wenku.baidu.com/view/88a5b2c48bd63186bcebbc67.html
六子棋官网：http://www.connect6.org/

//----------术语-----------//
活五：五颗同色棋子相连，对手必须用两个棋子遮挡住
眠五：五颗同色棋子相连，对手可用一颗棋子遮挡住
活四、眠四同理。
活三：再下一颗就活四
朦胧三：再下一颗只能形成眠四，下两颗形成活五
活二，眠二：再下两颗形成活四眠四

路：六子相连，即获胜情况。
总路数：所有可能获胜情况。
//---------------想法-------------//
(1)采用局部扫描进行估值：
二步落子并为“一步”进行估值
六子棋共有924条路，针对每个路进行分析，得到当前局面的评分。
每步的落子，局面评分只由这两个棋子水平，垂直，左右斜方向上的路的改变所决定，与其他路无关
每步影响的路数=每个方向所含路数*一个落子所要扫描方向数*每步落子数
一般情况下索要扫描的路数=6(路/方向)*4(方向/落子)*2(落子)=48
(2)棋形：
由共线的同色棋子和空位置组成的*最长*连续序列，一个棋形长度>=6。
同时出现两个形状，颜色完全形同的棋形，必须看作两个棋形
由三元组{color,id，from}:
id有子为1，无子为0，id是棋形01二进制转化为10进制，不同的length，id一定不同。
对棋盘每个交叉点进行编号，1，2，3....
form为该棋形中编号最小的点
(3)启发式搜索
威胁判断：当形成3个以及以上的威胁就能赢，威胁是一方需要下t颗棋子避免另一方连六
威胁判断可以大大减少对博弈树的分析：如果有三威胁认输，双威胁接下来两子均去减少双威胁，单威胁一子去避免，另一子再去分析。
(4)脱离战场策略
最外侧棋子圈定出矩形，长和宽再向外扩充两个单位，作为当前搜索范围，对精度影响很小。
(5)只对路进行分析，棋形太多了无法面面俱到。先判断是否是路，在对路进行分析打分。
(6)博弈树与αβ剪枝
对当前棋面所有可能落两子的情况进行评分，选择前width个情况，是博弈树的宽度。可以考虑应用局部轮廓矩形的方法，降低搜索范围。
由于评分是己方-敌方，可以考虑不用MinMax算法
(7)MinMax算法：
(8)应用哈希表：对已经评估过的函数不再进行重复评估。
(8)考虑在递归博弈树之前增加分支判断，来简化搜索。
(9)
(10)启发式评价函数MinMax应用于深度比较大的树
优于传统MinMax
蒙特卡洛随机降低复杂度
(11)考虑定石，即固定的传统的开局方式，共有30种